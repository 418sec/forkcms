/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/src/Backend/Core/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Backend/Core/Js/backend.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Backend/Core/Js/backend.js":
/*!****************************************!*\
  !*** ./src/Backend/Core/Js/backend.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Layout_Sass_screen_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Layout/Sass/screen.scss */ \"./src/Backend/Core/Layout/Sass/screen.scss\");\n/* harmony import */ var _Layout_Sass_screen_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Layout_Sass_screen_scss__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Backend related objects\n */\n\n/* global CKEDITOR, Bloodhound, linkList, BlockEditor */\n\nvar jsBackend = {\n  debug: false,\n  current: {\n    module: null,\n    action: null,\n    language: null\n  },\n  // init, something like a constructor\n  init: function () {\n    // get url and split into chunks\n    var chunks = document.location.pathname.split('/'); // set some properties\n\n    jsBackend.debug = jsBackend.data.get('debug');\n    jsBackend.current.language = chunks[2];\n    if (!navigator.cookieEnabled) $('#noCookies').addClass('active').css('display', 'block');\n\n    if (typeof chunks[3] === 'undefined') {\n      jsBackend.current.module = null;\n    } else {\n      jsBackend.current.module = utils.string.ucfirst(utils.string.camelCase(chunks[3]));\n    }\n\n    if (typeof chunks[4] === 'undefined') {\n      jsBackend.current.action = null;\n    } else {\n      jsBackend.current.action = utils.string.ucfirst(utils.string.camelCase(chunks[4]));\n    } // set defaults\n\n\n    if (!jsBackend.current.module) jsBackend.current.module = 'Dashboard';\n    if (!jsBackend.current.action) jsBackend.current.action = 'index'; // init stuff\n\n    jsBackend.initAjax();\n    jsBackend.addModalEvents();\n    jsBackend.balloons.init();\n    jsBackend.controls.init();\n    jsBackend.effects.init();\n    jsBackend.tabs.init();\n    jsBackend.forms.init();\n    jsBackend.layout.init();\n    jsBackend.tooltip.init();\n    jsBackend.tableSequenceByDragAndDrop.init();\n\n    if (jsData.Core.preferred_editor === 'ck-editor') {\n      jsBackend.ckeditor.init();\n    } else if (jsData.Core.preferred_editor === 'block-editor') {\n      jsBackend.blockEditor.init();\n    }\n\n    jsBackend.resizeFunctions.init();\n    jsBackend.navigation.init();\n    jsBackend.session.init(); // do not move, should be run as the last item.\n\n    if (!jsBackend.data.get('debug')) jsBackend.forms.unloadWarning();\n  },\n  addModalEvents: function () {\n    var $modals = $('[role=dialog].modal');\n\n    if ($modals.length === 0) {\n      return;\n    }\n\n    $modals.on('shown.bs.modal', function () {\n      $('#ajaxSpinner').addClass('light');\n      $(this).attr('aria-hidden', 'false');\n    });\n    $modals.on('hide.bs.modal', function () {\n      $('#ajaxSpinner').removeClass('light');\n      $(this).attr('aria-hidden', 'true');\n    });\n  },\n  // init ajax\n  initAjax: function () {\n    // variables\n    var $ajaxSpinner = $('#ajaxSpinner'); // set defaults for AJAX\n\n    $.ajaxSetup({\n      url: '/backend/ajax',\n      cache: false,\n      type: 'POST',\n      dataType: 'json',\n      timeout: 10000,\n      beforeSend: function (jqXHR) {\n        jqXHR.setRequestHeader('X-CSRF-Token', jsBackend.data.get('csrf-token'));\n      },\n      data: {\n        fork: {\n          module: jsBackend.current.module,\n          action: jsBackend.current.action,\n          language: jsBackend.current.language\n        }\n      }\n    }); // global error handler\n\n    $(document).ajaxError(function (e, XMLHttpRequest, ajaxOptions) {\n      // 401 means we aren't authenticated anymore, so reload the page\n      if (XMLHttpRequest.status === 401) window.location.reload(); // check if a custom errorhandler is used\n\n      if (typeof ajaxOptions.error === 'undefined') {\n        // init var\n        var textStatus = jsBackend.locale.err('SomethingWentWrong'); // get real message\n\n        if (typeof XMLHttpRequest.responseText !== 'undefined') textStatus = $.parseJSON(XMLHttpRequest.responseText).message; // show message\n\n        jsBackend.messages.add('danger', textStatus, '', true);\n      }\n    }); // spinner stuff\n\n    $(document).ajaxStart(function () {\n      $ajaxSpinner.show();\n    });\n    $(document).ajaxStop(function () {\n      $ajaxSpinner.hide();\n    });\n  }\n};\n/**\n * Navigation controls\n */\n\njsBackend.navigation = {\n  init: function () {\n    jsBackend.navigation.mobile();\n    jsBackend.navigation.toggleCollapse();\n    jsBackend.navigation.tooltip();\n  },\n  mobile: function () {\n    var navbarWidth = this.calculateNavbarWidth();\n    var $navbarNav = $('.navbar-dark .navbar-nav');\n    $('.navbar-dark .navbar-nav').css('width', navbarWidth);\n    $('.js-nav-prev').on('click', function (e) {\n      e.preventDefault();\n      $navbarNav.animate({\n        'left': '+=85px'\n      });\n      this.setControls(85);\n    }.bind(this));\n    $('.js-nav-next').on('click', function (e) {\n      e.preventDefault();\n      $navbarNav.animate({\n        'left': '-=85px'\n      });\n      this.setControls(-85);\n    }.bind(this));\n  },\n  resize: function () {\n    var $navbarNav = $('.navbar-dark .navbar-nav');\n    var navbarWidth = this.calculateNavbarWidth();\n    var windowWidth = this.calculateWindowWidth();\n\n    if (navbarWidth < windowWidth) {\n      $navbarNav.css('left', '0');\n      $('.js-nav-next').hide();\n    }\n\n    this.setControls(0);\n  },\n  toggleCollapse: function () {\n    var $wrapper = $('.main-wrapper');\n    var $navCollapse = $('.js-toggle-nav');\n    var collapsed = $wrapper.hasClass('navigation-collapsed');\n\n    if ($wrapper.hasClass('navigation-collapsed')) {\n      $('.js-nav-screen-text').html(jsBackend.locale.lbl('OpenNavigation'));\n    } else {\n      $('.js-nav-screen-text').html(jsBackend.locale.lbl('CloseNavigation'));\n    }\n\n    $navCollapse.on('click', function (e) {\n      e.preventDefault();\n      $wrapper.toggleClass('navigation-collapsed');\n\n      if ($wrapper.hasClass('navigation-collapsed')) {\n        $('.js-nav-screen-text').html(jsBackend.locale.lbl('OpenNavigation'));\n      } else {\n        $('.js-nav-screen-text').html(jsBackend.locale.lbl('CloseNavigation'));\n      }\n\n      collapsed = !collapsed;\n      utils.cookies.setCookie('navigation-collapse', collapsed);\n      setTimeout(function () {\n        jsBackend.resizeFunctions.init();\n      }, 250);\n    });\n  },\n  tooltip: function () {\n    var $tooltip = $('[data-toggle=\"tooltip-nav\"]');\n    var $wrapper = $('.main-wrapper');\n\n    if ($tooltip.length > 0) {\n      $tooltip.tooltip({\n        boundary: 'window',\n        trigger: 'manual',\n        placement: 'right'\n      });\n      $tooltip.on('mouseover', function (e) {\n        if ($wrapper.hasClass('navigation-collapsed') && $(window).width() > 787) {\n          var $target = $(e.target);\n          $target.tooltip('show');\n        }\n      });\n      $tooltip.on('mouseout', function (e) {\n        $(e.target).tooltip('hide');\n      });\n    }\n  },\n  setControls: function (offset) {\n    var $navbarNav = $('.navbar-dark .navbar-nav');\n    var rightOffset = this.calculateOffset(offset);\n\n    if (parseInt($navbarNav.css('left')) + offset >= 0) {\n      $('.js-nav-prev').hide();\n    } else {\n      $('.js-nav-prev').show();\n    }\n\n    if (rightOffset < 0) {\n      $('.js-nav-next').show();\n    } else {\n      $('.js-nav-next').hide();\n    }\n  },\n  calculateWindowWidth: function () {\n    return $(window).width();\n  },\n  calculateNavbarWidth: function () {\n    var $navItem = $('.navbar-dark .nav-item');\n    return $navItem.width() * $navItem.length;\n  },\n  calculateOffset: function (offset) {\n    var $navbarNav = $('.navbar-dark .navbar-nav');\n    return this.calculateWindowWidth() - this.calculateNavbarWidth() - parseInt($navbarNav.css('left')) - offset;\n  }\n};\n/**\n * Handle form messages (action feedback: success, error, ...)\n */\n\njsBackend.balloons = {\n  // init, something like a constructor\n  init: function () {\n    // variables\n    var $toggleBalloon = $('.toggleBalloon');\n    $('.balloon:visible').each(function () {\n      // search linked element\n      var linkedElement = $('*[data-message-id=' + $(this).attr('id') + ']'); // linked item found?\n\n      if (linkedElement !== null) {\n        // variables\n        var topValue = linkedElement.offset().top + linkedElement.height() + 10;\n        var leftValue = linkedElement.offset().left - 30; // position\n\n        $(this).css('position', 'absolute').css('top', topValue).css('left', leftValue);\n      }\n    }); // bind click\n\n    $toggleBalloon.on('click', jsBackend.balloons.click);\n  },\n  // handle the click event (make it appear/disappear)\n  click: function (e) {\n    var clickedElement = $(this); // get linked balloon\n\n    var id = clickedElement.data('messageId'); // rel available?\n\n    if (id !== '') {\n      // hide if already visible\n      if ($('#' + id).is(':visible')) {\n        // hide\n        $('#' + id).fadeOut(500); // unbind\n\n        $(window).off('resize');\n      } else {\n        // not visible\n        // position\n        jsBackend.balloons.position(clickedElement, $('#' + id)); // show\n\n        $('#' + id).fadeIn(500); // set focus on first visible field\n\n        if ($('#' + id + ' form input:visible:first').length > 0) $('#' + id + ' form input:visible:first').focus(); // bind resize\n\n        $(window).resize(function () {\n          jsBackend.balloons.position(clickedElement, $('#' + id));\n        });\n      }\n    }\n  },\n  // position the balloon\n  position: function (clickedElement, element) {\n    // variables\n    var topValue = clickedElement.offset().top + clickedElement.height() + 10;\n    var leftValue = clickedElement.offset().left - 30; // position\n\n    element.css('position', 'absolute').css('top', topValue).css('left', leftValue);\n  }\n};\n/**\n * CK Editor related objects\n */\n\njsBackend.ckeditor = {\n  prepared: false,\n  defaultConfig: {\n    customConfig: '',\n    // layout configuration\n    bodyClass: 'content',\n    stylesSet: [],\n    // paste options\n    forcePasteAsPlainText: true,\n    pasteFromWordRemoveFontStyles: true,\n    // The CSS file(s) to be used to apply style to editor content.\n    // It should reflect the CSS used in the target pages where the content is to be displayed.\n    contentsCss: [],\n    // buttons\n    toolbar_Full: [{\n      name: 'basicstyles',\n      groups: ['basicstyles', 'cleanup'],\n      items: ['Bold', 'Italic', 'Underline', 'Strike', '-', 'RemoveFormat']\n    }, {\n      name: 'clipboard',\n      groups: ['clipboard', 'undo'],\n      items: ['Undo', 'Redo']\n    }, {\n      name: 'paragraph',\n      groups: ['list', 'indent', 'blocks', 'bidi'],\n      items: ['NumberedList', 'BulletedList', '-', 'Blockquote']\n    }, {\n      name: 'links',\n      items: ['ForkLink', 'Unlink', 'Anchor']\n    }, {\n      name: 'document',\n      groups: ['mode', 'document', 'doctools'],\n      items: ['Source', 'Templates']\n    }, {\n      name: 'insert',\n      items: ['ForkImage', 'Table', 'SpecialChar', 'Iframe', 'oembed']\n    }, {\n      name: 'styles',\n      items: ['Format', 'Styles']\n    }],\n    skin: 'moono-lisa',\n    toolbar: 'Full',\n    toolbarStartupExpanded: true,\n    // entities\n    entities: false,\n    entities_greek: false,\n    entities_latin: false,\n    // No file browser upload button in the images dialog needed\n    filebrowserUploadUrl: null,\n    filebrowserImageUploadUrl: null,\n    filebrowserFlashUploadUrl: null,\n    // load some extra plugins\n    extraPlugins: 'stylesheetparser,templates,iframe,dialogadvtab,oembed,lineutils,medialibrary,codemirror',\n    // remove useless plugins\n    removePlugins: 'image2,a11yhelp,about,bidi,colorbutton,elementspath,font,find,flash,forms,horizontalrule,newpage,pagebreak,preview,print,scayt,smiley,showblocks,devtools,magicline',\n    // templates\n    templates_files: [],\n    templates_replaceContent: false,\n    // custom vars\n    editorType: 'default',\n    toggleToolbar: false\n  },\n  // initialize the editor\n  init: function () {\n    // the language isn't know before this init-method is called, so we set the url for the template-files just now\n    jsBackend.ckeditor.defaultConfig.templates_files = ['/backend/ajax?fork[module]=Core&fork[action]=Templates&fork[language]=' + jsBackend.current.language]; // load the editor\n\n    if ($('textarea.inputEditor, textarea.inputEditorError').length > 0) {\n      jsBackend.ckeditor.prepare(); // load the editors\n\n      jsBackend.ckeditor.load();\n    }\n\n    jsBackend.ckeditor.fallBackBootstrapModals();\n\n    if (jsData.Core.preferred_editor === 'ck-editor') {\n      jsBackend.ckeditor.loadEditorsInCollections();\n    }\n  },\n  loadEditorsInCollections: function () {\n    $('[data-addfield=\"collection\"]').on('collection-field-added', function (event, formCollectionItem) {\n      jsBackend.ckeditor.prepare();\n      $(formCollectionItem).find('textarea.inputEditor, textarea.inputEditorError').ckeditor(jsBackend.ckeditor.callback, $.extend({}, jsBackend.ckeditor.defaultConfig));\n    });\n  },\n  prepare: function () {\n    if (jsBackend.ckeditor.prepared) {\n      return;\n    } // language options\n\n\n    jsBackend.ckeditor.defaultConfig.contentsLanguage = jsBackend.current.language;\n    jsBackend.ckeditor.defaultConfig.language = jsBackend.data.get('editor.language'); // content Css\n\n    jsBackend.ckeditor.defaultConfig.contentsCss.push('/src/Frontend/Core/Layout/Css/screen.css');\n    if (jsBackend.data.get('theme.has_css')) jsBackend.ckeditor.defaultConfig.contentsCss.push('/src/Frontend/Themes/' + jsBackend.data.get('theme.theme') + '/Core/Layout/Css/screen.css');\n    jsBackend.ckeditor.defaultConfig.contentsCss.push('/src/Frontend/Core/Layout/Css/editor_content.css');\n    if (jsBackend.data.get('theme.has_editor_css')) jsBackend.ckeditor.defaultConfig.contentsCss.push('/src/Frontend/Themes/' + jsBackend.data.get('theme.theme') + '/Core/Layout/Css/editor_content.css'); // bind on some global events\n\n    CKEDITOR.on('dialogDefinition', jsBackend.ckeditor.onDialogDefinition);\n    CKEDITOR.on('instanceReady', jsBackend.ckeditor.onReady);\n    jsBackend.ckeditor.prepared = true;\n  },\n  destroy: function () {\n    // the destroy will trigger errors, but it will actually be destroyed just fine!\n    try {\n      $.each(CKEDITOR.instances, function (i, value) {\n        value.destroy();\n      });\n    } catch (err) {}\n  },\n  load: function () {\n    // extend the editor config\n    var editorConfig = $.extend({}, jsBackend.ckeditor.defaultConfig); // bind on inputEditor and inputEditorError\n\n    $('textarea.inputEditor, textarea.inputEditorError').ckeditor(jsBackend.ckeditor.callback, editorConfig);\n  },\n  callback: function () {},\n  checkContent: function (evt) {\n    // get the editor\n    var editor = evt.editor; // on initialisation we should force the check, which will be passed in the data-container\n\n    var forced = typeof evt.forced === 'boolean' ? evt.forced : false; // was the content changed, or is the check forced?\n\n    if (editor.checkDirty() || forced) {\n      var content = editor.getData();\n      var warnings = []; // no alt?\n\n      if (content.match(/<img(.*)alt=\"\"(.*)/im)) warnings.push(jsBackend.locale.msg('EditorImagesWithoutAlt')); // invalid links?\n\n      if (content.match(/href=(\"|')\\/private\\/([a-z]{2,})\\/([a-z_]*)\\/(.*)\\1/im)) warnings.push(jsBackend.locale.msg('EditorInvalidLinks')); // remove the previous warnings\n\n      $('#' + editor.element.getId() + '_warnings').remove(); // @todo: met dit id loopt iets mis\n      // any warnings?\n\n      if (warnings.length > 0) {\n        // append the warnings after the editor\n        $('#cke_' + editor.element.getId()).after('<span id=\"' + editor.element.getId() + '_warnings\" class=\"infoMessage editorWarning\">' + warnings.join(' ') + '</span>');\n      }\n    }\n  },\n  onDialogDefinition: function (evt) {\n    // get the dialog definition\n    var dialogDefinition = evt.data.definition;\n    var infoTab = ''; // specific stuff for the table-dialog\n\n    if (evt.data.name === 'table') {\n      // remove the advanced tab because it is confusing fo the end-user\n      dialogDefinition.removeContents('advanced'); // get the info tab\n\n      infoTab = dialogDefinition.getContents('info'); // remove fields we don't want to use, because they will mess up the layout\n\n      infoTab.remove('txtBorder');\n      infoTab.remove('cmbAlign');\n      infoTab.remove('txtCellSpace');\n      infoTab.remove('txtCellPad'); // set a beter default for the width\n\n      infoTab.get('txtWidth')['default'] = '100%';\n    }\n\n    if (evt.data.name === 'oembed') {\n      dialogDefinition.getContents('general').elements.splice(2, 0, {\n        type: 'button',\n        id: 'browseServer',\n        label: 'Browse Server',\n        onClick: function () {\n          var editor = this.getDialog().getParentEditor();\n          editor.popup(window.location.origin + jsData.MediaLibrary.browseActionVideos, 800, 800);\n\n          window.onmessage = function (event) {\n            if (event.data && typeof event.data === 'object' && 'media-url' in event.data) {\n              this.setValueOf('general', 'embedCode', event.data['media-url']);\n            }\n          }.bind(this.getDialog());\n        },\n        style: 'margin-top: 20px;'\n      });\n    }\n  },\n  onReady: function (evt) {\n    // bind on blur and focus\n    evt.editor.on('blur', jsBackend.ckeditor.checkContent); // force the content check\n\n    jsBackend.ckeditor.checkContent({\n      editor: evt.editor,\n      forced: true\n    });\n  },\n  fallBackBootstrapModals: function () {\n    $.fn.modal.Constructor.prototype.enforceFocus = function () {\n      var modalThis = this;\n      $(document).on('focusin.modal', function (e) {\n        if (modalThis.$element[0] !== e.target && !modalThis.$element.has(e.target).length && !$(e.target.parentNode).hasClass('cke_dialog_ui_input_select') && !$(e.target.parentNode).hasClass('cke_dialog_ui_input_text') && !$(e.target.parentNode).hasClass('cke_dialog_ui_input_textarea')) {\n          modalThis.$element.focus();\n        }\n      });\n    };\n  }\n};\n/**\n * Block editor related objects\n */\n\njsBackend.blockEditor = {\n  // initialize the editor\n  init: function () {\n    jsBackend.blockEditor.initEditors($('textarea.inputBlockEditor'));\n    jsBackend.blockEditor.loadEditorsInCollections();\n  },\n  initEditors: function (editors) {\n    if (editors.length > 0) {\n      editors.each(function () {\n        jsBackend.blockEditor.createEditor($(this));\n      });\n    }\n  },\n  createEditor: function ($element) {\n    BlockEditor.editor.fromJson($element, $element.attr('fork-block-editor-config'));\n  },\n  loadEditorsInCollections: function () {\n    $('[data-addfield=\"collection\"]').on('collection-field-added', function (event, formCollectionItem) {\n      jsBackend.blockEditor.initEditors($(formCollectionItem).find('textarea.inputBlockEditor'));\n    });\n  }\n};\n/**\n * Handle form functionality\n */\n\njsBackend.controls = {\n  // init, something like a constructor\n  init: function () {\n    jsBackend.controls.bindCheckboxDropdownCombo();\n    jsBackend.controls.bindCheckboxTextfieldCombo();\n    jsBackend.controls.bindRadioButtonFieldCombo();\n    jsBackend.controls.bindConfirm();\n    jsBackend.controls.bindFakeDropdown();\n    jsBackend.controls.bindMassCheckbox();\n    jsBackend.controls.bindMassAction();\n    jsBackend.controls.bindPasswordGenerator();\n    jsBackend.controls.bindPasswordStrengthMeter();\n    jsBackend.controls.bindWorkingLanguageSelection();\n    jsBackend.controls.bindTableCheckbox();\n    jsBackend.controls.bindTargetBlank();\n    jsBackend.controls.bindToggleDiv();\n  },\n  // bind a checkbox dropdown combo\n  bindCheckboxDropdownCombo: function () {\n    // variables\n    var $checkboxDropdownCombo = $('.jsCheckboxDropdownCombo');\n    $checkboxDropdownCombo.each(function () {\n      var $this = $(this);\n      var multiple = !!$this.data('multiple') || false;\n\n      if ($this.find('input:checkbox').length > 0 && $this.find('select').length > 0) {\n        $this.find('input:checkbox').eq(0).on('change', function (e) {\n          var $combo = $(this).parents().filter($checkboxDropdownCombo);\n          var $field = $($combo.find('select'));\n\n          if (!multiple) {\n            $field = $field.eq(0);\n          }\n\n          var $this = $(this);\n\n          if ($this.is(':checked')) {\n            $field.removeClass('disabled').prop('disabled', false);\n            var $focusDropdown = !multiple ? $field : $field.eq(0);\n            $focusDropdown.focus();\n            return;\n          }\n\n          $field.addClass('disabled').prop('disabled', true);\n        }).trigger('change');\n      }\n    });\n  },\n  // bind a checkbox textfield combo\n  bindCheckboxTextfieldCombo: function () {\n    // variables\n    var $checkboxTextFieldCombo = $('.checkboxTextFieldCombo');\n    $checkboxTextFieldCombo.each(function () {\n      // variables\n      var $this = $(this); // check if needed element exists\n\n      if ($this.find('input:checkbox').length > 0 && $this.find('input:text').length > 0) {\n        // variables\n        var $checkbox = $this.find('input:checkbox').eq(0);\n        var $textField = $this.find('input:text').eq(0);\n        $checkbox.on('change', function (e) {\n          // redefine\n          var $this = $(this); // variables\n\n          var $combo = $this.parents().filter($checkboxTextFieldCombo);\n          var $field = $($combo.find('input:text')[0]);\n\n          if ($this.is(':checked')) {\n            $field.removeClass('disabled').prop('disabled', false).focus();\n          } else {\n            $field.addClass('disabled').prop('disabled', true);\n          }\n        });\n\n        if ($checkbox.is(':checked')) {\n          $textField.removeClass('disabled').prop('disabled', false);\n        } else {\n          $textField.addClass('disabled').prop('disabled', true);\n        }\n      }\n    });\n  },\n  // bind a radiobutton field combo\n  bindRadioButtonFieldCombo: function () {\n    // variables\n    var $radiobuttonFieldCombo = $('.radiobuttonFieldCombo');\n    $radiobuttonFieldCombo.each(function () {\n      // variables\n      var $this = $(this); // check if needed element exists\n\n      if ($this.find('input:radio').length > 0 && $this.find('input, select, textarea').length > 0) {\n        // variables\n        var $radiobutton = $this.find('input:radio');\n        var $selectedRadiobutton = $this.find('input:radio:checked');\n        $radiobutton.on('click', function (e) {\n          // redefine\n          var $this = $(this); // disable all\n\n          $this.parents('.radiobuttonFieldCombo:first').find('input:not([name=\"' + $radiobutton.attr('name') + '\"]), select, textarea').addClass('disabled').prop('disabled', true); // get fields that should be enabled\n\n          var $fields = $('input[name=\"' + $radiobutton.attr('name') + '\"]:checked').parents('.form-group:first').find('input:not([name=\"' + $radiobutton.attr('name') + '\"]), select, textarea'); // enable\n\n          $fields.removeClass('disabled').prop('disabled', false); // set focus\n\n          if (typeof $fields[0] !== 'undefined') $fields[0].focus();\n        }); // change?\n\n        if ($selectedRadiobutton.length > 0) {\n          $selectedRadiobutton.click();\n        } else {\n          $radiobutton[0].click();\n        }\n      }\n    });\n  },\n  // bind confirm message\n  bindConfirm: function () {\n    $('.jsConfirmationTrigger').on('click', function (e) {\n      // prevent default\n      e.preventDefault(); // get data\n\n      var href = $(this).attr('href');\n      var message = $(this).data('message');\n\n      if (typeof message === 'undefined') {\n        message = jsBackend.locale.msg('ConfirmDefault');\n      } // the first is necessary to prevent multiple popups showing after a previous modal is dismissed without\n      // refreshing the page\n\n\n      var $confirmation = $('.jsConfirmation').clone().first(); // bind\n\n      if (href !== '') {\n        // set data\n        $confirmation.find('.jsConfirmationMessage').html(message);\n        $confirmation.find('.jsConfirmationSubmit').attr('href', $(this).attr('href')); // open dialog\n\n        $confirmation.modal('show');\n      }\n    });\n  },\n  // let the fake dropdown behave nicely, like a real dropdown\n  bindFakeDropdown: function () {\n    // variables\n    var $fakeDropdown = $('.fakeDropdown');\n    $fakeDropdown.on('click', function (e) {\n      // prevent default behaviour\n      e.preventDefault(); // stop it\n\n      e.stopPropagation(); // variables\n\n      var $parent = $fakeDropdown.parent();\n      var $body = $('body'); // get id\n\n      var id = $(this).attr('href'); // IE8 prepends full current url before links to #\n\n      id = id.substring(id.indexOf('#'));\n\n      if ($(id).is(':visible')) {\n        // remove events\n        $body.off('click');\n        $body.off('keyup'); // remove class\n\n        $parent.removeClass('selected'); // hide\n\n        $(id).hide('blind', {}, 'fast');\n      } else {\n        // bind escape\n        $body.on('keyup', function (e) {\n          if (e.keyCode === 27) {\n            // unbind event\n            $body.off('keyup'); // remove class\n\n            $parent.removeClass('selected'); // hide\n\n            $(id).hide('blind', {}, 'fast');\n          }\n        }); // bind click outside\n\n        $body.on('click', function (e) {\n          // unbind event\n          $body.off('click'); // remove class\n\n          $parent.removeClass('selected'); // hide\n\n          $(id).hide('blind', {}, 'fast');\n        }); // add class\n\n        $parent.addClass('selected'); // show\n\n        $(id).show('blind', {}, 'fast');\n      }\n    });\n  },\n  // bind confirm message\n  bindMassAction: function () {\n    var $checkboxes = $('table.jsDataGrid .check input:checkbox');\n    var noneChecked = true; // check if none is checked\n\n    $checkboxes.each(function () {\n      if ($(this).prop('checked')) {\n        noneChecked = false;\n      }\n    }); // set disabled\n\n    if (noneChecked) {\n      $('.jsMassAction select').prop('disabled', true);\n      $('.jsMassAction .jsMassActionSubmit').prop('disabled', true);\n    } // hook change events\n\n\n    $checkboxes.on('change', function (e) {\n      // get parent table\n      var table = $(this).parents('table.jsDataGrid').eq(0); // any item checked?\n\n      if (table.find('input:checkbox:checked').length > 0) {\n        table.find('.jsMassAction select').prop('disabled', false);\n        table.find('.jsMassAction .jsMassActionSubmit').prop('disabled', false);\n      } else {\n        // nothing checked\n        table.find('.jsMassAction select').prop('disabled', true);\n        table.find('.jsMassAction .jsMassActionSubmit').prop('disabled', true);\n      }\n    }); // hijack the form\n\n    $('.jsMassAction .jsMassActionSubmit').on('click', function (e) {\n      // prevent default action\n      e.preventDefault(); // variables\n\n      var $this = $(this);\n      var $closestForm = $this.closest('form'); // not disabled\n\n      if (!$this.prop('disabled')) {\n        // get the selected element\n        if ($this.closest('.jsMassAction').find('select[name=action] option:selected').length > 0) {\n          // get action element\n          var element = $this.closest('.jsMassAction').find('select[name=action] option:selected'); // if the rel-attribute exists we should show the dialog\n\n          if (typeof element.data('target') !== 'undefined') {\n            // get id\n            var id = element.data('target');\n            $(id).modal('show');\n          } else {\n            // no confirm\n            $closestForm.submit();\n          }\n        } else {\n          // no confirm\n          $closestForm.submit();\n        }\n      }\n    });\n  },\n  // check all checkboxes with one checkbox in the tableheader\n  bindMassCheckbox: function () {\n    // mass checkbox changed\n    $('th.check input:checkbox').on('change', function (e) {\n      // variables\n      var $this = $(this); // check or uncheck all the checkboxes in this datagrid\n\n      $this.closest('table').find('td input:checkbox').prop('checked', $this.is(':checked')).change(); // set selected class\n\n      if ($this.is(':checked')) {\n        $this.parents().filter('table').eq(0).find('tbody tr').addClass('selected');\n      } else {\n        $this.parents().filter('table').eq(0).find('tbody tr').removeClass('selected');\n      }\n    }); // single checkbox changed\n\n    $('td.check input:checkbox').on('change', function (e) {\n      // variables\n      var $this = $(this); // check mass checkbox\n\n      if ($this.closest('table').find('td.checkbox input:checkbox').length === $this.closest('table').find('td.checkbox input:checkbox:checked').length) {\n        $this.closest('table').find('th .checkboxHolder input:checkbox').prop('checked', true);\n      } else {\n        // uncheck mass checkbox\n        $this.closest('table').find('th .checkboxHolder input:checkbox').prop('checked', false);\n      }\n    });\n  },\n  bindPasswordGenerator: function () {\n    // variables\n    var $passwordGenerator = $('.passwordGenerator');\n\n    if ($passwordGenerator.length > 0) {\n      $passwordGenerator.passwordGenerator({\n        length: 8,\n        numbers: false,\n        lowercase: true,\n        uppercase: true,\n        generateLabel: utils.string.ucfirst(jsBackend.locale.lbl('Generate'))\n      });\n    }\n  },\n  // bind the password strength meter to the correct inputfield(s)\n  bindPasswordStrengthMeter: function () {\n    // variables\n    var $passwordStrength = $('[data-role=\"password-strength-meter\"]');\n\n    if ($passwordStrength.length > 0) {\n      $passwordStrength.each(function () {\n        // grab id\n        var id = $(this).data('id'); // hide all\n\n        $('[data-role=\"password-strength-meter\"][data-id=\"' + id + '\"] [data-role=\"password-strength\"]').hide(); // execute function directly\n\n        var strength = jsBackend.controls.checkPassword($('#' + id).val()); // show\n\n        $('[data-role=\"password-strength-meter\"][data-id=\"' + id + '\"] [data-strength=\"' + strength + '\"]').show(); // bind keypress\n\n        $(document).on('keyup', '#' + id, function () {\n          // hide all\n          $('[data-role=\"password-strength-meter\"][data-id=\"' + id + '\"] [data-role=\"password-strength\"]').hide(); // execute function directly\n\n          var strength = jsBackend.controls.checkPassword($('#' + id).val()); // show\n\n          $('[data-role=\"password-strength-meter\"][data-id=\"' + id + '\"] [data-strength=\"' + strength + '\"]').show();\n        });\n      });\n    }\n  },\n  // check a string for passwordstrength\n  checkPassword: function (string) {\n    // init vars\n    var score = 0;\n    var uniqueChars = []; // no chars means no password\n\n    if (string.length === 0) return 'none'; // less then 4 chars is just a weak password\n\n    if (string.length <= 4) return 'weak'; // loop chars and add unique chars\n\n    for (var i = 0; i < string.length; i++) {\n      if ($.inArray(string.charAt(i), uniqueChars) === -1) uniqueChars.push(string.charAt(i));\n    } // less then 3 unique chars is just weak\n\n\n    if (uniqueChars.length < 3) return 'weak'; // more then 6 chars is good\n\n    if (string.length >= 6) score++; // more then 8 is beter\n\n    if (string.length >= 8) score++; // more then 12 is best\n\n    if (string.length >= 12) score++; // upper and lowercase?\n\n    if (string.match(/[a-z]/) && string.match(/[A-Z]/)) score += 2; // number?\n\n    if (string.match(/\\d+/)) score++; // special char?\n\n    if (string.match(/.[!,@,#,$,%,^,&,*,?,_,~,-,(,)]/)) score++; // strong password\n\n    if (score >= 6) return 'strong'; // average\n\n    if (score >= 2) return 'average'; // fallback\n\n    return 'weak';\n  },\n  // toggle a div\n  bindToggleDiv: function () {\n    $(document).on('click', '.toggleDiv', function (e) {\n      // prevent default\n      e.preventDefault(); // get id\n\n      var id = $(this).attr('href'); // show/hide\n\n      $(id).toggle(); // set selected class on parent\n\n      if ($(id).is(':visible')) {\n        $(this).parent().addClass('selected');\n      } else {\n        $(this).parent().removeClass('selected');\n      }\n    });\n  },\n  // bind checkboxes in a row\n  bindTableCheckbox: function () {\n    // set classes\n    $('tr td.checkbox input.inputCheckbox:checked').each(function () {\n      if (!$(this).parents('table').hasClass('noSelectedState')) {\n        $(this).parents().filter('tr').eq(0).addClass('selected');\n      }\n    }); // bind change-events\n\n    $(document).on('change', 'tr td.checkbox input.inputCheckbox:checkbox', function (e) {\n      if (!$(this).parents('table').hasClass('noSelectedState')) {\n        if ($(this).is(':checked')) {\n          $(this).parents().filter('tr').eq(0).addClass('selected');\n        } else {\n          $(this).parents().filter('tr').eq(0).removeClass('selected');\n        }\n      }\n    });\n  },\n  // bind target blank\n  bindTargetBlank: function () {\n    $('a.targetBlank').attr('target', '_blank').attr('rel', 'noopener noreferrer');\n  },\n  // toggle between the working languages\n  bindWorkingLanguageSelection: function () {\n    // variables\n    var $workingLanguage = $('#workingLanguage');\n    $workingLanguage.on('change', function (e) {\n      // preventDefault\n      e.preventDefault(); // break the url int parts\n\n      var urlChunks = document.location.pathname.split('/'); // get the query string, we will append it later\n\n      var queryChunks = document.location.search.split('&');\n      var newChunks = []; // any parts in the query string\n\n      if (typeof queryChunks !== 'undefined' && queryChunks.length > 0) {\n        // remove variables that could trigger an message\n        for (var i in queryChunks) {\n          if (queryChunks[i].substring(0, 5) !== 'token' && queryChunks[i].substring(0, 5) !== 'error' && queryChunks[i].substring(0, 6) === 'report' && queryChunks[i].substring(0, 3) === 'var' && queryChunks[i].substring(0, 9) === 'highlight') {\n            newChunks.push(queryChunks[i]);\n          }\n        }\n      } // replace the third element with the new language\n\n\n      urlChunks[2] = $(this).val(); // remove action\n\n      if (urlChunks.length > 4) urlChunks.pop();\n      var url = urlChunks.join('/');\n      if (newChunks.length > 0) url += '?token=true&' + newChunks.join('&'); // rebuild the url and redirect\n\n      document.location.href = url;\n    });\n  }\n};\n/**\n * Data related methods\n */\n\njsBackend.data = {\n  initialized: false,\n  data: {},\n  init: function () {\n    // check if var is available\n    if (typeof jsData === 'undefined') throw new Error('jsData is not available'); // populate\n\n    jsBackend.data.data = jsData;\n    jsBackend.data.initialized = true;\n  },\n  exists: function (key) {\n    return typeof jsBackend.data.get(key) !== 'undefined';\n  },\n  get: function (key) {\n    // init if needed\n    if (!jsBackend.data.initialized) jsBackend.data.init();\n    var keys = key.split('.');\n    var data = jsBackend.data.data;\n\n    for (var i = 0; i < keys.length; i++) {\n      data = data[keys[i]];\n    } // return\n\n\n    return data;\n  }\n};\n/**\n * Backend effects\n */\n\njsBackend.effects = {\n  // init, something like a constructor\n  init: function () {\n    jsBackend.effects.bindHighlight();\n    jsBackend.effects.panels();\n  },\n  // if a var highlight exists in the url it will be highlighted\n  bindHighlight: function () {\n    // get highlight from url\n    var highlightId = utils.url.getGetValue('highlight'); // id is set\n\n    if (highlightId !== '') {\n      // init selector of the element we want to highlight\n      var selector = '#' + highlightId; // item exists\n\n      if ($(selector).length > 0) {\n        // if its a table row we need to highlight all cells in that row\n        if ($(selector)[0].tagName.toLowerCase() === 'tr') {\n          selector += ' td';\n        } // when we hover over the item we stop the effect, otherwise we will mess up background hover styles\n\n\n        $(selector).on('mouseover', function () {\n          $(selector).stop(true, true);\n        }); // highlight!\n\n        $(selector).effect('highlight', {}, 5000);\n      }\n    }\n  },\n  // Adds classes to collapsible panels\n  panels: function () {\n    $('.panel .collapse').on({\n      'show.bs.collapse': function () {\n        // Remove open class from other panels\n        $(this).parents('.panel-group').find('.panel').removeClass('open'); // Add open class to active panel\n\n        $(this).parent('.panel').addClass('open');\n      },\n      'hide.bs.collapse': function () {\n        // Remove open class from closed panel\n        $(this).parent('.panel').removeClass('open');\n      }\n    });\n  }\n};\n/**\n * Backend forms\n */\n\njsBackend.forms = {\n  stringified: '',\n  // init, something like a constructor\n  init: function () {\n    jsBackend.forms.placeholders(); // make sure this is done before focusing the first field\n\n    jsBackend.forms.focusFirstField();\n    jsBackend.forms.datefields();\n    jsBackend.forms.submitWithLinks();\n    jsBackend.forms.tagsInput();\n    jsBackend.forms.meta();\n    jsBackend.forms.datePicker();\n    jsBackend.forms.bootstrapTabFormValidation();\n    jsBackend.forms.imagePreview();\n    jsBackend.forms.fileUpload();\n    jsBackend.forms.select2();\n  },\n  fileUpload: function () {\n    $('.custom-file-input').on('change', function (event) {\n      var file = '';\n      event = event.originalEvent;\n\n      for (var i = 0; i < event.target.files.length; i++) {\n        file = event.target.files[i];\n      }\n\n      $(event.currentTarget).siblings('.custom-file-label').text(file.name);\n    });\n  },\n  select2: function () {\n    $.fn.select2.defaults.set(\"theme\", \"bootstrap\");\n    $('[data-fork=select2]').select2();\n  },\n  imagePreview: function () {\n    $('input[type=file]').on('change', function () {\n      let imageField = $(this).get(0); // make sure we are uploading an image by checking the data attribute\n\n      if (imageField.getAttribute('data-fork-cms-role') === 'image-field' && imageField.files && imageField.files[0]) {\n        // get the image preview by matching the image-preview data-id to the ImageField id\n        let $imagePreview = $('[data-fork-cms-role=\"image-preview\"][data-id=\"' + imageField.id + '\"]'); // use FileReader to get the url\n\n        let reader = new FileReader();\n\n        reader.onload = function (event) {\n          $imagePreview.attr('src', event.target.result);\n        };\n\n        reader.readAsDataURL(imageField.files[0]);\n      }\n    });\n  },\n  bootstrapTabFormValidation: function () {\n    $('.tab-pane input, .tab-pane textarea, .tab-pane select').on('invalid', function () {\n      var $invalidField = $(this); // Find the tab-pane that this element is inside, and get the id\n\n      var invalidTabId = $invalidField.closest('.tab-pane').attr('id'); // Find the link that corresponds to the pane and have it show\n\n      $('a[href=#' + invalidTabId + '], [data-target=#' + invalidTabId + ']').tab('show');\n      $invalidField.focus();\n    });\n  },\n  meta: function () {\n    var $metaTabs = $('.js-do-meta-automatically');\n\n    if ($metaTabs.length === 0) {\n      return;\n    }\n\n    $metaTabs.each(function () {\n      var possibleOptions = ['baseFieldSelector', 'metaIdSelector', 'pageTitleSelector', 'pageTitleOverwriteSelector', 'navigationTitleSelector', 'navigationTitleOverwriteSelector', 'metaDescriptionSelector', 'metaDescriptionOverwriteSelector', 'metaKeywordsSelector', 'metaKeywordsOverwriteSelector', 'urlSelector', 'urlOverwriteSelector', 'generatedUrlSelector', 'customSelector', 'classNameSelector', 'methodNameSelector', 'parametersSelector'];\n      var options = {}; // only add the options that have been set\n\n      for (var i = 0, length = possibleOptions.length; i < length; i++) {\n        if (typeof this.dataset[possibleOptions[i]] !== 'undefined') {\n          options[possibleOptions[i]] = this.dataset[possibleOptions[i]];\n        }\n      }\n\n      $(this.dataset.baseFieldSelector).doMeta(options);\n    });\n  },\n  datefields: function () {\n    // variables\n    var dayNames = [jsBackend.locale.loc('DayLongSun'), jsBackend.locale.loc('DayLongMon'), jsBackend.locale.loc('DayLongTue'), jsBackend.locale.loc('DayLongWed'), jsBackend.locale.loc('DayLongThu'), jsBackend.locale.loc('DayLongFri'), jsBackend.locale.loc('DayLongSat')];\n    var dayNamesMin = [jsBackend.locale.loc('DayShortSun'), jsBackend.locale.loc('DayShortMon'), jsBackend.locale.loc('DayShortTue'), jsBackend.locale.loc('DayShortWed'), jsBackend.locale.loc('DayShortThu'), jsBackend.locale.loc('DayShortFri'), jsBackend.locale.loc('DayShortSat')];\n    var dayNamesShort = [jsBackend.locale.loc('DayShortSun'), jsBackend.locale.loc('DayShortMon'), jsBackend.locale.loc('DayShortTue'), jsBackend.locale.loc('DayShortWed'), jsBackend.locale.loc('DayShortThu'), jsBackend.locale.loc('DayShortFri'), jsBackend.locale.loc('DayShortSat')];\n    var monthNames = [jsBackend.locale.loc('MonthLong1'), jsBackend.locale.loc('MonthLong2'), jsBackend.locale.loc('MonthLong3'), jsBackend.locale.loc('MonthLong4'), jsBackend.locale.loc('MonthLong5'), jsBackend.locale.loc('MonthLong6'), jsBackend.locale.loc('MonthLong7'), jsBackend.locale.loc('MonthLong8'), jsBackend.locale.loc('MonthLong9'), jsBackend.locale.loc('MonthLong10'), jsBackend.locale.loc('MonthLong11'), jsBackend.locale.loc('MonthLong12')];\n    var monthNamesShort = [jsBackend.locale.loc('MonthShort1'), jsBackend.locale.loc('MonthShort2'), jsBackend.locale.loc('MonthShort3'), jsBackend.locale.loc('MonthShort4'), jsBackend.locale.loc('MonthShort5'), jsBackend.locale.loc('MonthShort6'), jsBackend.locale.loc('MonthShort7'), jsBackend.locale.loc('MonthShort8'), jsBackend.locale.loc('MonthShort9'), jsBackend.locale.loc('MonthShort10'), jsBackend.locale.loc('MonthShort11'), jsBackend.locale.loc('MonthShort12')];\n    var $inputDatefieldNormal = $('.inputDatefieldNormal');\n    var $inputDatefieldFrom = $('.inputDatefieldFrom');\n    var $inputDatefieldTill = $('.inputDatefieldTill');\n    var $inputDatefieldRange = $('.inputDatefieldRange');\n    $('.inputDatefieldNormal, .inputDatefieldFrom, .inputDatefieldTill, .inputDatefieldRange').datepicker({\n      dayNames: dayNames,\n      dayNamesMin: dayNamesMin,\n      dayNamesShort: dayNamesShort,\n      hideIfNoPrevNext: true,\n      monthNames: monthNames,\n      monthNamesShort: monthNamesShort,\n      nextText: jsBackend.locale.lbl('Next'),\n      prevText: jsBackend.locale.lbl('Previous'),\n      showAnim: 'slideDown'\n    }); // the default, nothing special\n\n    $inputDatefieldNormal.each(function () {\n      // variables\n      var $this = $(this); // get data\n\n      var data = $(this).data();\n      var value = $(this).val(); // set options\n\n      $this.datepicker('option', {\n        dateFormat: data.mask,\n        firstDate: data.firstday\n      }).datepicker('setDate', value);\n    }); // date fields that have a certain start date\n\n    $inputDatefieldFrom.each(function () {\n      // variables\n      var $this = $(this); // get data\n\n      var data = $(this).data();\n      var value = $(this).val(); // set options\n\n      $this.datepicker('option', {\n        dateFormat: data.mask,\n        firstDay: data.firstday,\n        minDate: new Date(parseInt(data.startdate.split('-')[0], 10), parseInt(data.startdate.split('-')[1], 10) - 1, parseInt(data.startdate.split('-')[2], 10))\n      }).datepicker('setDate', value);\n    }); // date fields that have a certain end date\n\n    $inputDatefieldTill.each(function () {\n      // variables\n      var $this = $(this); // get data\n\n      var data = $(this).data();\n      var value = $(this).val(); // set options\n\n      $this.datepicker('option', {\n        dateFormat: data.mask,\n        firstDay: data.firstday,\n        maxDate: new Date(parseInt(data.enddate.split('-')[0], 10), parseInt(data.enddate.split('-')[1], 10) - 1, parseInt(data.enddate.split('-')[2], 10))\n      }).datepicker('setDate', value);\n    }); // date fields that have a certain range\n\n    $inputDatefieldRange.each(function () {\n      // variables\n      var $this = $(this); // get data\n\n      var data = $(this).data();\n      var value = $(this).val(); // set options\n\n      $this.datepicker('option', {\n        dateFormat: data.mask,\n        firstDay: data.firstday,\n        minDate: new Date(parseInt(data.startdate.split('-')[0], 10), parseInt(data.startdate.split('-')[1], 10) - 1, parseInt(data.startdate.split('-')[2], 10), 0, 0, 0, 0),\n        maxDate: new Date(parseInt(data.enddate.split('-')[0], 10), parseInt(data.enddate.split('-')[1], 10) - 1, parseInt(data.enddate.split('-')[2], 10), 23, 59, 59)\n      }).datepicker('setDate', value);\n    });\n  },\n  // set the focus on the first field\n  focusFirstField: function () {\n    $('form input:visible:not(.noFocus):first').focus();\n  },\n  // set placeholders\n  placeholders: function () {\n    // detect if placeholder-attribute is supported\n    jQuery.support.placeholder = 'placeholder' in document.createElement('input');\n\n    if (!jQuery.support.placeholder) {\n      // variables\n      var $placeholder = $('input[placeholder]'); // bind focus\n\n      $placeholder.on('focus', function () {\n        // grab element\n        var $input = $(this); // only do something when the current value and the placeholder are the same\n\n        if ($input.val() === $input.attr('placeholder')) {\n          // clear\n          $input.val(''); // remove class\n\n          $input.removeClass('placeholder');\n        }\n      });\n      $placeholder.blur(function () {\n        // grab element\n        var $input = $(this); // only do something when the input is empty or the value is the same as the placeholder\n\n        if ($input.val() === '' || $input.val() === $input.attr('placeholder')) {\n          // set placeholder\n          $input.val($input.attr('placeholder')); // add class\n\n          $input.addClass('placeholder');\n        }\n      }); // call blur to initialize\n\n      $placeholder.blur(); // hijack the form so placeholders aren't submitted as values\n\n      $placeholder.parents('form').submit(function () {\n        // find elements with placeholders\n        $(this).find('input[placeholder]').each(function () {\n          // grab element\n          var $input = $(this); // if the value and the placeholder are the same reset the value\n\n          if ($input.val() === $input.attr('placeholder')) $input.val('');\n        });\n      });\n    }\n  },\n  // replaces buttons with <a><span>'s (to allow more flexible styling) and handle the form submission for them\n  submitWithLinks: function () {\n    // the html for the button that will replace the input[submit]\n    var replaceHTML = '<a class=\"{class}\" href=\"#{id}\"><span>{label}</span></a>'; // are there any forms that should be submitted with a link?\n\n    if ($('form.submitWithLink').length > 0) {\n      $('form.submitWithLink').each(function () {\n        // get id\n        var formId = $(this).attr('id');\n        var dontSubmit = false; // validate id\n\n        if (formId !== '') {\n          // loop every button to be replaced\n          $('form#' + formId + '.submitWithLink input[type=submit]').each(function () {\n            $(this).after(replaceHTML.replace('{label}', $(this).val()).replace('{id}', $(this).attr('id')).replace('{class}', 'submitButton button ' + $(this).attr('class'))).css({\n              position: 'absolute',\n              top: '-9000px',\n              left: '-9000px'\n            }).attr('tabindex', -1);\n          }); // add onclick event for button (button can't have the name submit)\n\n          $('form#' + formId + ' a.submitButton').on('click', function (e) {\n            e.preventDefault(); // is the button disabled?\n\n            if ($(this).prop('disabled')) {\n              return false;\n            } else {\n              $('form#' + formId).submit();\n            }\n          }); // dont submit the form on certain elements\n\n          $('form#' + formId + ' .dontSubmit').on('focus', function () {\n            dontSubmit = true;\n          });\n          $('form#' + formId + ' .dontSubmit').on('blur', function () {\n            dontSubmit = false;\n          }); // hijack the submit event\n\n          $('form#' + formId).submit(function (e) {\n            return !dontSubmit;\n          });\n        }\n      });\n    }\n  },\n  // add tagsinput to the correct input fields\n  tagsInput: function () {\n    if ($('.js-tags-input').length > 0) {\n      var allTags = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.whitespace,\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        prefetch: {\n          url: '/backend/ajax',\n          prepare: function (settings) {\n            settings.type = 'POST';\n            settings.data = {\n              fork: {\n                module: 'Tags',\n                action: 'GetAllTags'\n              }\n            };\n            return settings;\n          },\n          cache: false,\n          filter: function (list) {\n            list = list.data;\n            return list;\n          }\n        }\n      });\n      allTags.initialize();\n      $('.js-tags-input').tagsinput({\n        tagClass: 'badge badge-primary',\n        typeaheadjs: {\n          name: 'Tags',\n          source: allTags.ttAdapter()\n        }\n      });\n    }\n  },\n  // show a warning when people are leaving the\n  unloadWarning: function () {\n    // only execute when there is a form on the page\n    if ($('form:visible').length > 0) {\n      // loop fields\n      $('form input, form select, form textarea').each(function () {\n        var $this = $(this);\n\n        if (!$this.hasClass('dontCheckBeforeUnload')) {\n          // store initial value\n          $(this).data('initial-value', $(this).val()).addClass('checkBeforeUnload');\n        }\n      }); // bind before unload, this will ask the user if he really wants to leave the page\n\n      $(window).on('beforeunload', jsBackend.forms.unloadWarningCheck); // if a form is submitted we don't want to ask the user if he wants to leave, we know for sure\n\n      $('form').on('submit', function (e) {\n        if (!e.isDefaultPrevented()) $(window).off('beforeunload');\n      });\n    }\n  },\n  // check if any element has been changed\n  unloadWarningCheck: function (e) {\n    // initialize var\n    var changed = false; // loop fields\n\n    $('.checkBeforeUnload').each(function () {\n      // initialize\n      var $this = $(this); // compare values\n\n      if ($this.data('initial-value') !== $this.val()) {\n        if (typeof $this.data('initial-value') === 'undefined' && $this.val() === '') {} else {\n          // reset var\n          changed = true; // stop looking\n\n          return false;\n        }\n      }\n    }); // return if needed\n\n    if (changed) return jsBackend.locale.msg('ValuesAreChanged');\n  },\n  // Add date pickers to the appropriate input elements\n  datePicker: function () {\n    $('input[data-role=\"fork-datepicker\"]').each(function (index, datePickerElement) {\n      $(datePickerElement).datepicker();\n    });\n  }\n};\n/**\n * Do custom layout/interaction stuff\n */\n\njsBackend.layout = {\n  // init, something like a constructor\n  init: function () {\n    // hovers\n    $('.contentTitle').hover(function () {\n      $(this).addClass('hover');\n    }, function () {\n      $(this).removeClass('hover');\n    });\n    $('.jsDataGrid td a').hover(function () {\n      $(this).parent().addClass('hover');\n    }, function () {\n      $(this).parent().removeClass('hover');\n    });\n    jsBackend.layout.showBrowserWarning();\n    jsBackend.layout.dataGrid();\n    if ($('.dataFilter').length > 0) jsBackend.layout.dataFilter(); // fix last childs\n\n    $('.options p:last').addClass('lastChild');\n  },\n  // dataFilter layout fixes\n  dataFilter: function () {\n    // add last child and first child for IE\n    $('.dataFilter tbody td:first-child').addClass('firstChild');\n    $('.dataFilter tbody td:last-child').addClass('lastChild'); // init var\n\n    var tallest = 0; // loop group\n\n    $('.dataFilter tbody .options').each(function () {\n      // taller?\n      if ($(this).height() > tallest) tallest = $(this).height();\n    }); // set new height\n\n    $('.dataFilter tbody .options').height(tallest);\n  },\n  // data grid layout\n  dataGrid: function () {\n    if (jQuery.browser.msie) {\n      $('.jsDataGrid tr td:last-child').addClass('lastChild');\n      $('.jsDataGrid tr td:first-child').addClass('firstChild');\n    } // dynamic striping\n\n\n    $('.dynamicStriping.jsDataGrid tr:nth-child(2n)').addClass('even');\n    $('.dynamicStriping.jsDataGrid tr:nth-child(2n+1)').addClass('odd');\n  },\n  // if the browser isn't supported, show a warning\n  showBrowserWarning: function () {\n    var showWarning = false;\n    var version = ''; // check firefox\n\n    if (jQuery.browser.mozilla) {\n      // get version\n      version = parseInt(jQuery.browser.version.substr(0, 3).replace(/\\./g, '')); // lower than 19?\n\n      if (version < 19) showWarning = true;\n    } // check opera\n\n\n    if (jQuery.browser.opera) {\n      // get version\n      version = parseInt(jQuery.browser.version.substr(0, 1)); // lower than 9?\n\n      if (version < 9) showWarning = true;\n    } // check safari, should be webkit when using 1.4\n\n\n    if (jQuery.browser.safari) {\n      // get version\n      version = parseInt(jQuery.browser.version.substr(0, 3)); // lower than 1.4?\n\n      if (version < 400) showWarning = true;\n    } // check IE\n\n\n    if (jQuery.browser.msie) {\n      // get version\n      version = parseInt(jQuery.browser.version.substr(0, 1)); // lower or equal than 6\n\n      if (version <= 6) showWarning = true;\n    } // show warning if needed\n\n\n    if (showWarning) $('#showBrowserWarning').show();\n  }\n};\n/**\n * Locale\n */\n\njsBackend.locale = {\n  initialized: false,\n  data: {},\n  // init, something like a constructor\n  init: function () {\n    $.ajax({\n      url: '/src/Backend/Cache/Locale/' + jsBackend.data.get('interface_language') + '.json',\n      type: 'GET',\n      dataType: 'json',\n      async: false,\n      success: function (data) {\n        jsBackend.locale.data = data;\n        jsBackend.locale.initialized = true;\n      },\n      error: function (jqXHR, textStatus, errorThrown) {\n        throw new Error('Regenerate your locale-files.');\n      }\n    });\n  },\n  // get an item from the locale\n  get: function (type, key, module) {\n    // initialize if needed\n    if (!jsBackend.locale.initialized) {\n      jsBackend.locale.init();\n    }\n\n    var data = jsBackend.locale.data; // value to use when the translation was not found\n\n    var missingTranslation = '{$' + type + key + '}'; // validate\n\n    if (data === null || !data.hasOwnProperty(type) || data[type] === null) {\n      return missingTranslation;\n    } // this is for the labels prefixed with \"loc\"\n\n\n    if (typeof data[type][key] === 'string') {\n      return data[type][key];\n    } // if the translation does not exist for the given module, try to fall back to the core\n\n\n    if (!data[type].hasOwnProperty(module) || data[type][module] === null || !data[type][module].hasOwnProperty(key) || data[type][module][key] === null) {\n      if (!data[type].hasOwnProperty('Core') || data[type]['Core'] === null || !data[type]['Core'].hasOwnProperty(key) || data[type]['Core'][key] === null) {\n        return missingTranslation;\n      }\n\n      return data[type]['Core'][key];\n    }\n\n    return data[type][module][key];\n  },\n  // get an error\n  err: function (key, module) {\n    if (typeof module === 'undefined') module = jsBackend.current.module;\n    return jsBackend.locale.get('err', key, module);\n  },\n  // get a label\n  lbl: function (key, module) {\n    if (typeof module === 'undefined') module = jsBackend.current.module;\n    return jsBackend.locale.get('lbl', key, module);\n  },\n  // get localization\n  loc: function (key) {\n    return jsBackend.locale.get('loc', key);\n  },\n  // get a message\n  msg: function (key, module) {\n    if (typeof module === 'undefined') module = jsBackend.current.module;\n    return jsBackend.locale.get('msg', key, module);\n  }\n};\n/**\n * Handle form messages (action feedback: success, error, ...)\n */\n\njsBackend.messages = {\n  timers: [],\n  // add a new message into the que\n  add: function (type, content, optionalClass = '', dismissable = false) {\n    var uniqueId = 'e' + new Date().getTime().toString(); // switch icon type\n\n    var icon;\n    var role = 'status';\n    var live = 'polite';\n    var dismissableClass = ' d-none';\n    var autohide = false;\n\n    switch (type) {\n      case 'danger':\n        icon = 'far fa-times-circle';\n        role = 'alert';\n        live = 'assertive';\n        dismissableClass = '';\n        break;\n\n      case 'warning':\n        icon = 'fas fa-exclamation-circle';\n        role = 'alert';\n        live = 'assertive';\n        break;\n\n      case 'success':\n        icon = 'far fa-check-circle';\n        autohide = true;\n        break;\n\n      case 'info':\n        icon = 'fas fa-info-circle';\n        autohide = true;\n        break;\n    } // overrule dismissableClass if custom dismissable is true\n\n\n    if (dismissable) {\n      dismissableClass = '';\n    }\n\n    var html = '<div role=\"' + role + '\" aria-live=\"' + live + '\" id=\"' + uniqueId + '\" class=\"toast toast-' + type + ' ' + optionalClass + '\" data-autohide=\"' + autohide + '\" data-delay=\"5000\">' + '<div class=\"toast-body\">' + '<button type=\"button\" class=\"close' + dismissableClass + '\" data-dismiss=\"toast\" aria-label=\"' + utils.string.ucfirst(jsBackend.locale.lbl('Close')) + '\">' + '<i class=\"fas fa-times\"></i>' + '</button>' + '<i class=\"toast-icon ' + icon + '\" aria-hidden=\"true\"></i>' + ' ' + content + '</div>' + '</div>'; // prepend\n\n    if (optionalClass === undefined || optionalClass !== 'toast-inline') {\n      $('[data-messaging-wrapper]').prepend(html);\n    } else {\n      $('[data-content-container]').prepend(html);\n    } // show\n\n\n    $('#' + uniqueId).toast('show');\n  }\n};\n/**\n * Apply tabs\n */\n\njsBackend.tabs = {\n  // init, something like a constructor\n  init: function () {\n    if ($('.nav-tabs').length > 0) {\n      $('.tab-content .tab-pane').each(function () {\n        // check if there are invalid feedback classes, if they are visible or do not have display none style\n        if ($(this).find('.invalid-feedback').length > 0 && ($(this).find('.invalid-feedback:visible').length > 0 || $(this).find('.invalid-feedback').css('display') != 'none')) {\n          $('.nav-tabs a[href=\"#' + $(this).attr('id') + '\"]').addClass('bg-danger text-white');\n        } else {\n          $('.nav-tabs a[href=\"#' + $(this).attr('id') + '\"]').removeClass('bg-danger text-white');\n        }\n      });\n    }\n\n    $('.nav-tabs a').click(function (e) {\n      // if the browser supports history.pushState(), use it to update the URL with the fragment identifier, without triggering a scroll/jump\n      if (window.history && window.history.pushState) {\n        // an empty state object for now — either we implement a proper pop state handler ourselves, or wait for jQuery UI upstream\n        window.history.pushState({}, document.title, this.getAttribute('href'));\n      } else {\n        // for browsers that do not support pushState\n        // save current scroll height\n        var scrolled = $(window).scrollTop(); // set location hash\n\n        window.location.hash = '#' + this.getAttribute('href').split('#')[1]; // reset scroll height\n\n        $(window).scrollTop(scrolled);\n      }\n    }); // Show tab if the hash is in the url\n\n    var hash = window.location.hash;\n\n    if ($(hash).length > 0 && $(hash).hasClass('tab-pane')) {\n      $('a[href=\"' + hash + '\"]').tab('show');\n    }\n  }\n};\n/**\n * Apply tooltip\n */\n\njsBackend.tooltip = {\n  // init, something like a constructor\n  init: function () {\n    // variables\n    var $tooltip = $('[data-toggle=\"tooltip\"]');\n\n    if ($tooltip.length > 0) {\n      $tooltip.tooltip();\n    }\n  }\n};\n/**\n * Enable setting of sequence by drag & drop\n */\n\njsBackend.tableSequenceByDragAndDrop = {\n  // init, something like a constructor\n  init: function () {\n    // variables\n    var $sequenceBody = $('.sequenceByDragAndDrop tbody');\n\n    if ($sequenceBody.length > 0) {\n      $sequenceBody.sortable({\n        items: 'tr',\n        handle: 'td.dragAndDropHandle',\n        placeholder: 'dragAndDropPlaceholder',\n        forcePlaceholderSize: true,\n        stop: function (e, ui) {\n          jsBackend.tableSequenceByDragAndDrop.saveNewSequence($(this).closest('table.jsDataGrid'));\n        }\n      });\n      $sequenceBody.find('[data-role=\"order-move\"]').on('click.fork.order-move', function (e) {\n        var $this = $(this);\n        var $row = $this.closest('tr');\n        var direction = $this.data('direction');\n        e.preventDefault();\n\n        if (direction === 'up') {\n          $row.prev().insertAfter($row);\n        } else if (direction === 'down') {\n          $row.next().insertBefore($row);\n        }\n\n        jsBackend.tableSequenceByDragAndDrop.saveNewSequence($row.closest('table'));\n      });\n    }\n  },\n  saveNewSequence: function ($table) {\n    var action = typeof $table.data('action') === 'undefined' ? 'Sequence' : $table.data('action').toString();\n    var module = typeof $table.data('module') === 'undefined' ? jsBackend.current.module : $table.data('module').toString();\n    var extraParams = {};\n    var $rows = $table.find('tr[id*=row-]');\n    var newIdSequence = []; // fetch extra params\n\n    if (typeof $table.data('extra-params') !== 'undefined') {\n      extraParams = $table.data('extra-params'); // we convert the unvalid {'key':'value'} to the valid {\"key\":\"value\"}\n\n      extraParams = extraParams.replace(/'/g, '\"'); // we parse it as an object\n\n      extraParams = $.parseJSON(extraParams);\n    }\n\n    $rows.each(function () {\n      newIdSequence.push($(this).data('id'));\n    });\n    $.ajax({\n      data: $.extend({\n        fork: {\n          module: module,\n          action: action\n        },\n        new_id_sequence: newIdSequence.join(',')\n      }, extraParams),\n      success: function (data) {\n        // not a success so revert the changes\n        if (data.code !== 200) {\n          $table.sortable('cancel');\n          jsBackend.messages.add('danger', jsBackend.locale.err('AlterSequenceFailed'));\n        } // redo odd-even\n\n\n        $table.find('tr').removeClass('odd').removeClass('even');\n        $table.find('tr:even').addClass('odd');\n        $table.find('tr:odd').addClass('even');\n\n        if (data.code !== 200 && jsBackend.debug) {\n          window.alert(data.message);\n        }\n\n        jsBackend.messages.add('success', jsBackend.locale.msg('ChangedOrderSuccessfully'));\n      },\n      error: function (XMLHttpRequest) {\n        var textStatus = jsBackend.locale.err('AlterSequenceFailed'); // get real message\n\n        if (typeof XMLHttpRequest.responseText !== 'undefined') {\n          textStatus = $.parseJSON(XMLHttpRequest.responseText).message;\n        }\n\n        jsBackend.messages.add('danger', textStatus);\n        $table.sortable('cancel');\n\n        if (jsBackend.debug) {\n          window.alert(textStatus);\n        }\n      }\n    });\n  }\n};\n\nwindow.requestAnimationFrame = function () {\n  var lastTime;\n  lastTime = 0;\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback, element) {\n    var curTime, id, timeToCall;\n    curTime = new Date().getTime();\n    timeToCall = Math.max(0, 16 - (curTime - lastTime));\n    id = window.setTimeout(function () {\n      var thisTime = curTime + timeToCall;\n      return callback(thisTime);\n    }, timeToCall);\n    lastTime = curTime + timeToCall;\n    return id;\n  };\n}();\n\njsBackend.resizeFunctions = {\n  init: function () {\n    var calculate, tick, ticking;\n    ticking = false;\n\n    calculate = function (_this) {\n      return function () {\n        jsBackend.navigation.resize();\n\n        if (typeof jsBackend.analytics !== 'undefined') {\n          jsBackend.analytics.chartDoubleMetricPerDay.init();\n          jsBackend.analytics.chartPieChart.init();\n        }\n\n        ticking = false;\n      };\n    }(this);\n\n    tick = function () {\n      if (!ticking) {\n        this.requestAnimationFrame(calculate);\n        ticking = true;\n      }\n    };\n\n    tick();\n    return $(window).on('load resize', function () {\n      return tick();\n    });\n  }\n};\njsBackend.session = {\n  init: function () {\n    jsBackend.session.sessionTimeoutPopup();\n  },\n  // Display a session timeout warning 1 minute before the session might actually expire\n  sessionTimeoutPopup: function () {\n    setInterval(function () {\n      window.alert(jsBackend.locale.msg('SessionTimeoutWarning'));\n    }, (jsData.Core.session_timeout - 60) * 1000);\n  }\n};\n$(jsBackend.init);\n\n//# sourceURL=webpack:///./src/Backend/Core/Js/backend.js?");

/***/ }),

/***/ "./src/Backend/Core/Layout/Sass/screen.scss":
/*!**************************************************!*\
  !*** ./src/Backend/Core/Layout/Sass/screen.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src/Backend/Core/Layout/Sass/screen.scss?");

/***/ })

/******/ });